#!/usr/bin/python"""Created on Wed Oct 04 10:57:34 2017@author: Gerwyn"""from __future__ import divisionimport osimport numpy as npimport astropy.constants as apimport astropy.units as auimport math""" Units"""G = ap.G.to('cm3 / (g s2)')M_cu = 1.991e33 * au.gprint "Mass unit : ", M_cudist_cu = 9.9999998e16 * au.cmprint "Distance unit : ", dist_cutime_cu = 2.7436898e12 * au.sprint "Time unit : ", time_cuv_cu = dist_cu / time_cuvkms = 1e5 * au.cm / au.kmvel_cu = v_cu / vkmsprint "Velocity unit : ", vel_curho_cu = M_cu / dist_cu ** 3print "Density unit : ", rho_cuergs_cu = (M_cu * dist_cu ** 2) / time_cu ** 2print "Energy unit (ergs) : ", ergs_cuk_B = ap.k_B.cgs*((au.cm**2)*au.g/(au.s**2))/au.ergprint "Boltzmann Const : ", k_Bm_p = ap.m_p.to('g')print "Mass of Proton : ", m_pdef aread(filename):    def readtag(fobj):        tag = np.fromfile(fobj, dtype="|S4", count=1)        return tag    def readlen(fobj):        skip = np.fromfile(fobj, dtype=np.int32, count=1)        # recordlength is length in bits        recordunit = np.fromfile(fobj, dtype=np.int32, count=1)        numbits = np.fromfile(fobj, dtype=np.int32, count=1)        recordlength = (numbits / recordunit)        return recordlength    print "Reading file:", filename    bytesleft = 256 - 6 * 4 - 6 * 8 - 2 * 8 - 2 * 4 - 6 * 4 - 2 * 4 - 4 * 8 - 2 * 4 - 6 * 2 - 3 * 4 - 4    with open(filename, "rb") as file:        ##### Header #####        dummy = np.fromfile(file, dtype=np.int32, count=1)        tag = np.fromfile(file, dtype="|S4", count=1)        dummy = np.fromfile(file, dtype=np.int32, count=3)        npart = np.fromfile(file, dtype=np.int32, count=6)        massarr = np.fromfile(file, dtype=np.double, count=6)        time = np.fromfile(file, dtype=np.double, count=1)  ##  [0]        redshift = np.fromfile(file, dtype=np.double, count=1)[0]        flag_sfr = np.fromfile(file, dtype=np.int32, count=1)[0]        flag_feedback = np.fromfile(file, dtype=np.int32, count=1)[0]        npartTotal = np.fromfile(file, dtype=np.int32, count=6)        flag_cooling = np.fromfile(file, dtype=np.int32, count=1)[0]        num_files = np.fromfile(file, dtype=np.int32, count=1)[0]        boxsize = np.fromfile(file, dtype=np.double, count=1)  ##  [0]        cos1 = np.fromfile(file, dtype=np.double, count=1)[0]        cos2 = np.fromfile(file, dtype=np.double, count=1)[0]        hubble_param = np.fromfile(file, dtype=np.double, count=1)[0]        flag_stellarage = np.fromfile(file, dtype=np.int32, count=1)[0]        flag_metals = np.fromfile(file, dtype=np.int32, count=1)[0]        npartHighword = np.fromfile(file, dtype='int16', count=6)        flag_entropy = np.fromfile(file, dtype=np.int32, count=1)[0]        flag_dp = np.fromfile(file, dtype=np.int32, count=1)[0]        flag_1pt = np.fromfile(file, dtype=np.int32, count=1)[0]        scalefactor = np.fromfile(file, dtype='float32', count=1)[0]        dum = np.fromfile(file, dtype='int16', count=np.int(bytesleft / 2))        pad = np.fromfile(file, dtype='int16', count=4)        print "npart array:", npart        print "mass array:", massarr        print "time in codeunits:", time        print "Total npart:", npartTotal        print "Header finished\n"        N = int(sum(npart))        ngas = npart[0]        nsink = npart[5]        tag = readtag(file)        recordlength = readlen(file)        print "Found array with tag ", tag, "and record length", recordlength        pos = np.zeros((N, 3), dtype=np.double)        vel = np.zeros((N, 3), dtype=np.double)        partid = np.zeros(N, dtype=np.int32)        mass = np.zeros(N, dtype=np.double)        u = np.zeros(ngas, dtype=np.double)        rho = np.zeros(ngas, dtype=np.double)        potential = np.zeros(N, dtype=np.double)        divv = np.zeros(ngas, dtype=np.double)        accel = np.zeros((N, 3), dtype=np.double)        tdust = np.zeros(ngas, dtype=np.double)        dtime = np.zeros(ngas, dtype=np.double)        bfield = np.zeros((ngas, 3), dtype=np.double)        divb = np.zeros(ngas, dtype=np.double)        softening = np.zeros(ngas, dtype=np.double)        chem = np.zeros((ngas, 3), dtype=np.double)        while len(recordlength > 0):            # sys.exit("Stop") #            ## Case statement ##            if tag == "POS ":                print "Reading positions"                posdum = np.fromfile(file, dtype=np.double, count=3 * N)                print "Read positions, min and max: ", np.amin(posdum), np.amax(posdum)                pos = np.reshape(posdum, (-1, 3))            elif tag == "VEL ":                print "Reading velocities"                veldum = np.fromfile(file, dtype=np.double, count=3 * N)                print "Read velocities, min and max: ", np.amin(veldum), np.amax(veldum)                vel = np.reshape(veldum, (-1, 3))            elif tag == "ID  ":                print "Reading particle IDs"                partid = np.fromfile(file, dtype=np.int32, count=N)                print "Read IDs, min and max:", np.amin(partid), np.amax(partid)            elif tag == "MASS":                print "Reading particle masses"                mass = np.fromfile(file, dtype=np.double, count=N)                print "Read masses, min and max: ", np.amin(mass), np.amax(mass)            elif tag == "U   ":                print "Reading u"                u = np.fromfile(file, dtype=np.double, count=ngas)                print "Read u, min and max: ", np.amin(u), np.amax(u)            elif tag == "RHO ":                print "Reading densities"                rho = np.fromfile(file, dtype=np.double, count=ngas)                print "Read densities, min and max: ", np.amin(rho), np.amax(rho)            elif tag == "POT ":                print "Reading potentials"                potential = np.fromfile(file, dtype=np.double, count=N)                print "Read potentials, min and max: ", np.amin(potential), np.amax(potential)            elif tag == "DIVV":                print "Reading velocity divergence"                divv = np.fromfile(file, dtype=np.double, count=ngas)                print "Read velocity divergence, min and max:", np.amin(divv), np.amax(divv)            elif tag == "ACCE":                print "Reading accelerations"                acceldum = np.fromfile(file, dtype=np.double, count=N * 3)                print "Read accelerations, min and max: ", np.amin(acceldum), np.amax(acceldum)                accel = np.reshape(acceldum, (-1, 3))            elif tag == "DUST":                print "Reading dust temperatures"                tdust = np.fromfile(file, dtype=np.double, count=ngas)                print "Read dust temperatures, min and max: ", np.amin(tdust), np.amax(tdust)            elif tag == "TSTP":                print "Reading timesteps"                dtime = np.fromfile(file, dtype=np.double, count=N)                print "Read timesteps, min and max:", np.amin(dtime), np.amax(dtime)            elif tag == "BFLD":                print "Reading magnetic field"                bfielddum = np.fromfile(file, dtype=np.double, count=3 * ngas)                print "Read magnetic field, min and max: ", np.amin(bfielddum), np.amax(bfielddum)                bfield = np.reshape(bfielddum, (-1, 3))            elif tag == "DIVB":                print "Reading magnetic field divergence"                divb = np.fromfile(file, dtype=np.double, count=ngas)                print "Read magnetic field divergence, min and max: ", np.amin(divb), np.amax(divb)            elif tag == "SOFT":                print "Reading softening"                softening = np.fromfile(file, dtype=np.double, count=N)                print "Read softenings, min and max: ", np.amin(softening), np.amax(softening)            elif tag == "CHEM":                print "Reading chemistry"                chemdum = np.fromfile(file, dtype=np.double, count=3 * ngas)                num_species = np.int(recordlength/ngas)                print "Found ", num_species, "chemical species"                print "Read chemistry, min and max: ", np.amin(chemdum), np.amax(chemdum)                chem = chemdum.reshape(-1, num_species).T            else:                break            pad = np.fromfile(file, dtype='int16', count=4)            tag = readtag(file)            recordlength = readlen(file)            if len(recordlength) > 0:                print "Found array with tag ", tag, "and record length", recordlength    if nsink > 0:        print "Reading sinks"        idsink = np.linspace(0, nsink - 1, nsink, dtype='int16') + ngas        sinkpos = pos[idsink, :]        sinkvel = vel[idsink, :]        sinkmass = mass[idsink]        sinkid = partid[idsink]    else:        sinkpos, sinkvel, sinkmass, sinkid = 0, 0, 0, 0    print "Finished reading file:", filename, "\n"    return pos, vel, partid, mass, u, rho, potential, divv, accel, tdust, dtime, bfield, divb, softening, chem, time, nsink, ngas, sinkpos, sinkvel, sinkmass, sinkid, num_species